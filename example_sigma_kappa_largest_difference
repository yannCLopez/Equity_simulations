# Running the provided code num_iter times and storing the slopes of the lines of best fit for blue and green points
# Then finding the run with the biggest difference in slopes and plotting that


import numpy as np
from scipy.optimize import differential_evolution, NonlinearConstraint
import matplotlib.pyplot as plt


# Parameters
num_agents = 12

G = np.array([
    [0, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [3, 0, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
])
num_iter = 1
p = 0.2


# Define a function that performs the operation and returns the slopes
def compute_slopes_and_plot(num_agents, p, G, num_iter):
    max_slope_diff = 0
    best_run = None
    
    for iter in range(num_iter):
        b = 1 + np.random.uniform(-0.2, 0.2, num_agents)

        def objective_function(t, p=p, G=G, b=b):
            n = len(t)
            I = np.eye(n)
            T_sqrt = np.diag(np.sqrt(t))
            a_star = p * np.linalg.inv(I - p * T_sqrt @ G) @ T_sqrt @ b
            Y_a = b @ a_star + 0.5 * a_star.T @ G @ a_star
            Y = min(Y_a, 1)
            return (-1 + np.sum(t)) * p * Y

        bounds = [(0, 1) for _ in range(num_agents)]
        def constraint_sum(t):
            return 1 - np.sum(t)

        nonlinear_constraint = NonlinearConstraint(constraint_sum, -np.inf, 1)
        result = differential_evolution(
            objective_function, bounds, constraints=[nonlinear_constraint]
        )
        
        optimal_t = result.x
        a_star_optimal = compute_a_star(optimal_t, p, G, b)
        kappa = b + G @ a_star_optimal
        
        # Compute the line of best fit for the blue dots (excluding the first three points).
        m_blue, _ = np.polyfit(kappa[3:], optimal_t[3:], 1)

        # Compute the line of best fit for the first three points (green dots).
        m_green, _ = np.polyfit(kappa[:3], optimal_t[:3], 1)
        
        # Calculate the difference in slopes
        slope_diff = abs(m_blue - m_green)
        
        # Check if this is the largest difference so far
        if slope_diff > max_slope_diff:
            max_slope_diff = slope_diff
            best_run = (kappa, optimal_t, m_blue, m_green)
        Y_a_star_optimal = b @ a_star_optimal + 0.5 * a_star_optimal.T @ G @ a_star_optimal
            
    return best_run, Y_a_star_optimal



def compute_a_star(t, p, G, b):
        n = len(t)
        I = np.eye(n)
        T_sqrt = np.diag(np.sqrt(t))
        a_star = p * np.linalg.inv(I - p * T_sqrt @ G) @ T_sqrt @ b
        return a_star

# Run the optimization and plotting 10 times and find the run with the biggest difference in slopes
best_run_data, Y_a_star_optimal = compute_slopes_and_plot(num_agents, p, G, num_iter)
print(best_run_data)
print (Y_a_star_optimal)
# Unpack the data for the run with the biggest difference in slopes
# Assuming best_run_data contains the necessary data




if best_run_data:
    kappa, optimal_t, m_blue, m_green = best_run_data

 

    # Create a figure for plotting the run with the biggest difference in slopes
    plt.figure(figsize=(10, 6))

    # Plot the blue dots and the line of best fit for them
    plt.plot(kappa[3:], optimal_t[3:], 'o', color='blue', label='Data (blue)')

    # Plot the first three points (green dots) and the line of best fit for them
    plt.plot(kappa[:3], optimal_t[:3], 'o', color='#90EE90', label='Data (green)')

    plt.title(f'Figure with the Largest Slope Difference, Y={Y_a_star_optimal}')
    plt.xlabel(r'$\kappa$', fontsize=14)  # LaTeX formatted x-axis label
    plt.ylabel(r'$\sigma^*$', fontsize=14)  # LaTeX formatted y-axis label
    plt.legend()
    plt.grid(True)
    plt.show()
else:
    print("No data available for plotting.")
